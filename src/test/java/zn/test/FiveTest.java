/**
 * 
 */
package zn.test;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import zn.dao.UserDao;
import zn.until.EncodeUtils;
import zn.until.UdpClientSocket;

/**
 * @author hq
 *
 */
public class FiveTest {
	
	@Test
	public void test() throws UnsupportedEncodingException{
//	     ApplicationContext    ac = new ClassPathXmlApplicationContext("spring-mybatis.xml");  
//	     UserDao dao = ac.getBean("userDao",UserDao.class);
//	     List<Map<String,Object>> list=dao.seleteUserListByMonId(3);
//	     System.out.println(list.toString());
//		String a="5346425201000000030000000c000000010000000000000000000000000000000000000000000000000000000000513f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f221e162b304a5dad4825290a6c3f2c";
//		String b="5346425201000000030000000C00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	String f="53464252000000001e00000010000000df070000070000000f0000000a00000013000000070000000000000000000000000000000100000000c0084200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f221e162b304a5dad4825290a6c3f2c";

//		System.out.println(a.length());
//		byte[] a=new byte[]{12,-87,-86};
//		System.out.println(a[0]+a[1]+a[2]);
//		String b=EncodeUtils.hexEncode(a);
//		System.out.println(b);
//		 String info = new String(a, 0,a.length,"ISO-8859-1"); 
//		
//		
//		
//		 byte[] hex;
//		try {
//			hex = info.getBytes("ISO-8859-1");
//			 System.out.println(hex[0]+":"+hex[1]+":"+hex[2]);
//		} catch (UnsupportedEncodingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	
		 
	}
	
	@Test
	public void  test2() throws Exception{
		String hex1="53464252000000001e00000010000000df070000070000000f0000000a00000013000000070000000000000000000000000000000100000000c0084200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f221e162b304a5dad4825290a6c3f2c";
		String hex2="53 46 42 52  00 00 00 00 1e 00 00 00  13 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 07 00 00 00 1a 00 00 00 01 00 00 00  11 00 00 00  12 00 00 00   00 00 00 00 00 b4 4c 413f221e162b304a5dad4825290a6c3f2c";
		String hex3="53 46 42 52  00 00 00 00 1e 00 00 00    15 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0a 00 00 00 0f 00 00 00 0c 00 00 00 00 00 00 00 00 00 00 00  10 00 00 00    01 00 00 00 60 26 62 433f221e162b304a5dad4825290a6c3f2c";
		String hex4="53 46 42 52  00 00 00 00   1e 00 00 00     14 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0a 00 00 00 31 00 00 00 20 00 00 00  00 00 00 00 00 00 00 00  11 00 00 00   00 00 00 00 ff ad 81 423f221e162b304a5dad4825290a6c3f2c";
		String hex5="53 46 42 52   00 00 00 00  1e 00 00 00  16 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 09 00 00 00 17 00 00 00 17 00 00 00  00 00 00 00 00 00 00 00  10 00 00 00     00 00 00 00 e0 1d 63 433f221e162b304a5dad4825290a6c3f2c";
		String hex6="53 46 42 52  00 00 00 00  1e 00 00 00   18 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0a 00 00 00 13 00 00 00 07 00 00 00  00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 80 0b 423f221e162b304a5dad4825290a6c3f2c";
		String hex7="53 46 42 52  00 00 00 00  1e 00 00 00  31 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0a 00 00 00 13 00 00 00 07 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00";
		String hex8="53 46 42 52  00 00 00 00 1e 00 00 00 19 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 07 00 00 00 1a 00 00 00 01 00 00 00 11 00 00 00 12 00 00 00   00 00 00 00 00 b4 4c 413f221e162b304a5dad4825290a6c3f2c";
		String hex9="53 46 42 52  00 00 00 00 1e 00 00 00  20 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 07 00 00 00 1a 00 00 00 01 00 00 00  11 00 00 00 12 00 00 00 00 00 00 00 00 b4 4c 413f221e162b304a5dad4825290a6c3f2c";
		String hex10="53 46 42 52  00 00 00 00  1e 00 00 00  21 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 1c 00 00 00 0a 00 00 00 01 00 00 00 11 00 00 00 12 00 00 00   01 00 00 003f221e162b304a5dad4825290a6c3f2c";
		String hex11="53 46 42 52  00 00 00 00 1e 00 00 00  22 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 07 00 00 00 1a 00 00 00 01 00 00 00  11 00 00 00  12 00 00 00  00 00 00 00 00 b4 4c 41 3f221e162b304a5dad4825290a6c3f2c";
		String hex12="53 46 42 52  00 00 00 00 1e 00 00 00  23 00 00 00 df 07 00 00 07 00 00 00 0f 00 00 00 0b 00 00 00 07 00 00 00 1a 00 00 00 01 00 00 00 11 00 00 00  12 00 00 00  00 00 00 00  00 b4 4c 413f221e162b304a5dad4825290a6c3f2c";
		byte[] hex=EncodeUtils.hexDecode(hex12.replaceAll("\\s", ""));
		UdpClientSocket client = new UdpClientSocket(); 
	    String serverHost = "192.168.2.8";    
        int serverPort = 2003;   
		   client.send(serverHost, serverPort, hex); 
	}

}
